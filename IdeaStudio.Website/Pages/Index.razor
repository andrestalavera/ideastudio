@page "/"
@page "/andres-talavera-resume"
@using IdeaStudio.Website.Models
@using IdeaStudio.Website.Shared
@using IdeaStudio.Website.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject ILazyLoadingService LazyLoadingService
@inject IJSRuntime JSRuntime

<HeroComponent Introduction="@aboutMe?.Introduction" Languages="@aboutMe?.Languages" />

<ServiceCardsComponent Cards="@aboutMe?.Cards" />

<section id="experiences" class="py-5">
	<div class="container">
		<SectionComponent Title="Professional experiences" />

		@if (experiences?.Items != null && experiences.Items.Any())
		{
			<div class="row g-4">
				@foreach (var (experience, index) in experiences.Items.Select((e, i) => (e, i)))
				{
					<div class="col-12">
						<ExperienceComponent Id="@experience.Id" Title="@experience.Title" Index="@index" Company="@experience.Company"
							Mode="@experience.Mode" StartDate="@experience.StartDate" EndDate="@experience.EndDate"
							Location="@experience.Location" Description="@experience.Description"
							Responsibilities="@experience.Responsibilities" Skills="@experience.Skills" />
					</div>
				}
				@* <Virtualize Items="experiences.Items" Context="experience">
				<ItemContent>
					<ExperienceComponent Id="@experience.Id" Title="@experience.Title" Company="@experience.Company" Mode="@experience.Mode"
						StartDate="@experience.StartDate" EndDate="@experience.EndDate" Location="@experience.Location"
						Description="@experience.Description" Responsibilities="@experience.Responsibilities"
						Skills="@experience.Skills" />
				</ItemContent>
				<EmptyContent>
					<p class="text-center">No experience details available.</p>
				</EmptyContent>
				<Placeholder>
					<LoadingComponent />
					<PlaceholderComponent />
				</Placeholder>
			</Virtualize>
				}*@
			</div>
		}
		else
		{
			<LoadingComponent />
			<PlaceholderComponent />
		}
	</div>
</section>

<section id="training" class="py-5">
	<div class="container">
		<SectionComponent Title="I have conducted training courses for..." />

		@if (trainingCenters?.Items != null && trainingCenters.Items.Any())
		{
			<div class="row g-4">
				@foreach (var (trainingCenter, index) in trainingCenters.Items.Select((t, i) => (t, i)))
				{
					<div class="col-lg-6">
						<article class="card h-100 fade-in-up" data-bs-delay="@(index * 100)"
							style="transition-delay: @(index * 100)ms;">
							<div class="card-body p-4">
								<h3 class="card-title h4 mb-3 text-primary fw-bold">@trainingCenter.Name</h3>

								@if (trainingCenter.Courses != null)
								{
									<div class="mb-3">
										<h4 class="h6 mb-2  opacity-75">Courses</h4>
										<div class="d-flex flex-wrap gap-2">
											@foreach (var course in trainingCenter.Courses)
											{
												<span class="badge bg-acrylic-2 text-primary rounded-pill px-3 py-2">
													<i class="fas fa-graduation-cap me-2" aria-hidden="true"></i>
													@course
												</span>
											}
										</div>
									</div>
								}

								@if (trainingCenter.Locations != null)
								{
									<div class="small  opacity-75">
										<i class="fas fa-map-marker-alt me-2 text-primary" aria-hidden="true"></i>
										@string.Join(" - ", trainingCenter.Locations)
									</div>
								}
							</div>
						</article>
					</div>
				}
			</div>
		}
		else
		{
			<div class="row g-4">
				@for (int i = 0; i < 6; i++)
				{
					<div class="col-lg-6">
						<div class="card h-100">
							<div class="card-body p-4">
								<PlaceholderComponent />
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
</section>

<!-- Contact Section -->
<section id="contact" class="py-5">
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-lg-8 text-center fade-in-up" id="let-s-connect">
				<div class="card bg-acrylic-2 border-0 shadow-lg contact-card">
					<div class="card-body p-5">
						<h2 class="mb-4 display-5 fw-light">Let's Connect</h2>
						<p class="lead mb-4 opacity-90">Ready to discuss your next project? Let's build
							something amazing together.</p>
						<div class="d-flex justify-content-center gap-3 flex-wrap">
							<a href="https://www.linkedin.com/in/andrestalavera/"
								class="btn btn-primary rounded-pill bg-acrylic-1 px-4 py-2" target="_blank"
								rel="noopener noreferrer">
								<i class="fab fa-linkedin me-2" aria-hidden="true"></i>Connect on LinkedIn
							</a>
							<a href="https://github.com/andrestalavera"
								class="btn btn-secondary rounded-pill bg-acrylic-2 px-4 py-2" target="_blank"
								rel="noopener noreferrer">
								<i class="fab fa-github me-2" aria-hidden="true"></i>View GitHub
							</a>
							<button class="btn btn-success rounded-pill bg-acrylic-2 bg-success px-4 py-2"
								onclick="Calendly.initPopupWidget({url: 'https://calendly.com/andres-talavera/30min'});return false;">
								<i class="fas fa-video me-2" aria-hidden="true"></i>Schedule Meeting
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

@code {
	private AboutMe? aboutMe;
	private Experiences? experiences;
	private TrainingCenters? trainingCenters;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Load data concurrently
			var aboutMeTask = LazyLoadingService.LoadDataAsync<AboutMe>("data/aboutme.json");
			var experiencesTask = LazyLoadingService.LoadDataAsync<Experiences>("data/experiences.json");
			var trainingCentersTask = LazyLoadingService.LoadDataAsync<TrainingCenters>("data/trainingcenters.json");

			// Wait for all tasks to complete
			await Task.WhenAll(aboutMeTask, experiencesTask, trainingCentersTask);

			aboutMe = await aboutMeTask;
			experiences = await experiencesTask;
			trainingCenters = await trainingCentersTask;

			// Initialize JavaScript functions for animations and scroll spy
			await JSRuntime.InvokeVoidAsync("initializeFadeInAnimations");
			await JSRuntime.InvokeVoidAsync("initializeScrollSpy");

			// Trigger re-render
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading data: {ex.Message}");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("initializeFadeInAnimations");
		}
	}
}
