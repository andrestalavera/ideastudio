@page "/"
@page "/andres-talavera-resume"
@using IdeaStudio.Website.Models
@using IdeaStudio.Website.Services
@using IdeaStudio.Website.Shared
@using IdeaStudio.Website.Components
@using Markdig
@using System.Text.Json
@inject IAnimationService AnimationService
@inject ILazyLoadingService LazyLoadingService

@inherits LocalizedComponent
@layout MainLayout

@{
	if (MainLayoutInstance is not null)
	{
		MainLayoutInstance.NavbarContent = NavbarNavigationContent;
	}
}

<HeroComponent PersonalInformation="@resume?.PersonalInformation" ProfileImage="images/andres-talavera.jpeg" />
<div class="pagebreak"></div>

<section id="about" class="py-5 d-print-none" data-bs-spy="scroll" data-bs-target="#navbar">
	<div class="container">
		@if (resume?.AboutSections is not null)
		{
			<div class="row g-4">
				@foreach (var (section, index) in resume.AboutSections.Select((s, i) => (s, i)))
				{
					<div class="col-12 col-lg-6 col-xxl-4">
						<CardComponent Title="@(section.Title)" Index="@index">
							<Content>
								@if (section.Paragraphs is not null)
								{
									@foreach (string paragraph in section.Paragraphs)
									{
										<p class="text-primary">@((MarkupString)Markdown.ToHtml(paragraph))</p>
									}
								}
								@if (section.Icons is not null)
								{
									<div class="d-flex d-print-none justify-content-center gap-3 my-3">
										@foreach (string icon in section.Icons)
										{
											<i class="@icon fa-4x" aria-hidden="true"></i>
										}
									</div>
								}
								@if (section.Images is not null)
								{
									<div class="d-flex d-print-none justify-content-center gap-3 my-3">
										@foreach (string image in section.Images)
										{
											<img src="images/@image" alt="@image" class="p-1" width="70" height="70" loading="lazy">
										}
									</div>
								}
							</Content>
						</CardComponent>
					</div>
				}
			</div>
		}
		else
		{
			<PlaceholderComponent />
		}
	</div>
</section>

<section id="experiences" class="py-5 pagebreak" data-bs-spy="scroll" data-bs-target="#navbar">
    <div class="container">
        <SectionComponent Title="@_professionalExperiencesText" />

		@if (resume?.Experiences is not null)
		{
			<div class="row g-4">
				@foreach (var (experience, index) in resume.Experiences.Select((e, i) => (e, i)))
				{
					<div class="col-12 @DisplayClasses(index, DEFAULT_EXPERIENCES_TO_SHOW)">
						<ExperienceComponent Experience="@experience" />
					</div>
				}
			</div>

			@if (HasHiddenExperiences)
			{
				<div class="row d-print-none">
					<div class="col-12 text-center mt-4">
						<button class="btn btn-light" @onclick="ToggleExperiences">
							@if (showAllExperiences)
							{
								<span>@_showLatestExperiencesText</span>
							}
							else
							{
								<span>@string.Format(_showMoreExperiencesText, HiddenExperiencesCount)</span>
							}
						</button>
					</div>
				</div>
			}
		}
		else
		{
			<PlaceholderComponent />
		}
	</div>
</section>

<section id="trainings" class="py-5 d-print-none" data-bs-spy="scroll" data-bs-target="#navbar">
    <div class="container">
        <SectionComponent Title="@_trainingCoursesText" />

		@if (resume?.TrainingCenters is not null)
		{
			<div class="row g-4">
				@foreach (var (center, index) in resume.TrainingCenters.Select((t, i) => (t, i)))
				{
					<div class="col-12 col-lg-6 col-xxl-4">
						<CardComponent Title="@center.Name" Index="@index">
							<Content>
								@if (center.Courses is not null)
								{
									<div class="vstack">
										<p>Courses</p>
										@foreach (string course in center.Courses)
										{
											<div class="d-flex align-items-center text-primary">
												<i class="fas fa-graduation-cap me-2 small"></i>@course
											</div>
										}
									</div>
								}
								@if (center.Locations is not null)
								{
									<div class="mt-2">
										<p>Locations</p>
										@foreach (string location in center.Locations)
										{
											<span class="badge text-bg-light mt-2 me-2">
												<i class="fas fa-map-marker-alt me-2 small"></i>@location
											</span>
										}
									</div>
								}
							</Content>
						</CardComponent>
					</div>
				}
			</div>
		}
		else
		{
			<PlaceholderComponent />
		}
	</div>
</section>

<section id="contact" class="py-5 d-print-none" data-bs-spy="scroll" data-bs-target="#navbar">
	<ContactComponent />
</section>

@code {
    [CascadingParameter] public MainLayout? MainLayoutInstance { get; set; }

    private Resume? resume;
    private bool showAllExperiences = false;
    private const int DEFAULT_EXPERIENCES_TO_SHOW = 3;
    private int HiddenExperiencesCount => Math.Max(0, (resume?.Experiences?.Count() ?? 0) - DEFAULT_EXPERIENCES_TO_SHOW);
    private bool HasHiddenExperiences => HiddenExperiencesCount > 0;
    private string _professionalExperiencesText = "Professional experiences";
    private string _trainingCoursesText = "I have conducted training courses for...";
    private string _showMoreExperiencesText = "Show more experiences";
    private string _showLatestExperiencesText = "Show only 3 latest experiences";
    private string _aboutText = "About";
    private string _experiencesText = "Experiences";
    private string _trainingText = "Training";
    private string _contactText = "Contact";


	private RenderFragment NavbarNavigationContent =>
    @<ul class="navbar-nav me-auto">
        <li class="nav-item">
            <a class="nav-link rounded-pill mx-1" href="#about" data-section="about">@_aboutText</a>
        </li>
        <li class="nav-item">
            <a class="nav-link rounded-pill mx-1" href="#experiences" data-section="experiences">@_experiencesText</a>
        </li>
        <li class="nav-item">
            <a class="nav-link rounded-pill mx-1" href="#trainings" data-section="training">@_trainingText</a>
        </li>
        <li class="nav-item">
            <a class="nav-link rounded-pill mx-1" href="#contact" data-section="contact">@_contactText</a>
        </li>
    </ul>;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await AnimationService.InitializeAnimationsAsync();
        await LoadResumeAsync();
    }

    protected override async Task LoadLocalizedStringsAsync()
    {
        await base.LoadLocalizedStringsAsync();
        LoadTexts();
        await LoadResumeAsync();

        if (MainLayoutInstance is not null)
        {
            MainLayoutInstance.SetNavbarContent(NavbarNavigationContent);
        }
    }

    private void LoadTexts()
    {
        _professionalExperiencesText = LocalizationService.GetString("ProfessionalExperiences");
        _trainingCoursesText = LocalizationService.GetString("TrainingCourses");
        _showMoreExperiencesText = LocalizationService.GetString("ShowMoreExperiences");
        _showLatestExperiencesText = LocalizationService.GetString("ShowLatestExperiences");
        _aboutText = LocalizationService.GetString("About");
        _experiencesText = LocalizationService.GetString("Experiences");
        _trainingText = LocalizationService.GetString("Training");
        _contactText = LocalizationService.GetString("Contact");
    }

    private async Task LoadResumeAsync()
    {
        string languageCode = GetLanguageCode(CultureService.CurrentCulture.Name);
        resume = await LazyLoadingService.LoadDataAsync<Resume>($"data/resume-{languageCode}.json");
        StateHasChanged();
    }

    private static string GetLanguageCode(string cultureName) => cultureName switch
    {
        "fr" or "fr-FR" => "fr",
        _ => "en"
    };

    private void ToggleExperiences()
    {
        showAllExperiences = !showAllExperiences;
        StateHasChanged();
    }

    private string DisplayClasses(int index, int toShow)
    {
        string baseClasses = "d-print-flex";
        return index < toShow ? $"{baseClasses} d-flex" : showAllExperiences ? $"{baseClasses} d-flex" : $"{baseClasses} d-none";
    }
}
