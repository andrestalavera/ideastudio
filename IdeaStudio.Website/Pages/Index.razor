@page "/"
@page "/andres-talavera-resume"
@using IdeaStudio.Website.Models
@using IdeaStudio.Website.Services
@using IdeaStudio.Website.Components
@using Markdig
@using System.Text.Json
@inject IAnimationService AnimationService
@inject ILazyLoadingService LazyLoadingService
@inject ISlugService SlugService

@inherits LocalizedComponent
@layout MainLayout

<HeroSection PersonalInformation="@resume?.PersonalInformation" ProfileImage="images/andres-talavera.jpeg" />

<div class="pagebreak"></div>

<section id="about" class="py-5 d-print-none" data-bs-spy="scroll" data-bs-target="#navbar">
    <div class="container">
    @if (resume?.AboutSections is not null)
    {
        <div class="row g-4">
        @foreach (var (section, index) in resume.AboutSections.Select((s, i) => (s, i)))
        {
            <div class="col-12 col-lg-6 col-xxl-4">
                <AboutCard AboutSection="@(section)" Index="@index" />
            </div>
        }
        </div>
    }
    else
    {
        <Placeholder />
    }
    </div>
</section>

<section id="experiences" class="py-5 pagebreak" data-bs-spy="scroll" data-bs-target="#navbar">
    <div class="container">
        <Heading Title="@professionalExperiencesText" />

        @if (resume?.Experiences is not null)
        {
            <div class="row g-4">
            @foreach (var (experience, index) in resume.Experiences.Select((e, i) => (e, i)))
            {
                <div class="col-12 d-print-flex @DisplayClasses(index, DEFAULT_EXPERIENCES_TO_SHOW)">
                    <ExperienceCard Experience="@experience.WithGeneratedId(SlugService)" />
                </div>
            }
            </div>

        @if (hasHiddenExperiences)
        {
            <div class="row d-print-none">
                <div class="col-12 text-center mt-4">
                    <button class="btn btn-light" @onclick="ToggleExperiences">
                    @if (showAllExperiences)
                    {
                        <span>@showLatestExperiencesText</span>
                    }
                    else
                    {
                        <span>@string.Format(showMoreExperiencesText, hiddenExperiencesCount)</span>
                    }
                    </button>
                </div>
            </div>
        }
    }
    else
    {
        <Placeholder />
    }
    </div>
</section>

<section id="trainings" class="py-5 d-print-none" data-bs-spy="scroll" data-bs-target="#navbar">
    <div class="container">
        <Heading Title="@trainingCoursesText" />

        @if (resume?.TrainingCenters is not null)
        {
            <div class="row g-4">
                @foreach (var (center, index) in resume.TrainingCenters.Select((t, i) => (t, i)))
                {
                    <div class="col-12 col-lg-6 col-xxl-4">
                        <TrainingCard TrainingCenter="@center.WithGeneratedId(SlugService)" Index="@index" />
                    </div>
                }
            </div>
        }
        else
        {
            <Placeholder />
        }
    </div>
</section>

<section id="contact" class="py-5 d-print-none" data-bs-spy="scroll" data-bs-target="#navbar">
    <div class="container">
        <Heading Title="@letsConnectText" />
        <ContactSection />
    </div>
</section>

@code {
    [CascadingParameter] public MainLayout? MainLayoutInstance { get; set; }

    private Resume? resume;
    private bool showAllExperiences = false;
    private const int DEFAULT_EXPERIENCES_TO_SHOW = 3;
    private int hiddenExperiencesCount => Math.Max(0, (resume?.Experiences?.Count() ?? 0) - DEFAULT_EXPERIENCES_TO_SHOW);
    private bool hasHiddenExperiences => hiddenExperiencesCount > 0;
    private string professionalExperiencesText = "Professional experiences";
    private string trainingCoursesText = "I have conducted training courses for...";
    private string showMoreExperiencesText = "Show more experiences";
    private string showLatestExperiencesText = "Show only 3 latest experiences";
    private string aboutText = "About";
    private string experiencesText = "Experiences";
    private string trainingText = "Training";
    private string contactText = "Contact";
    private string letsConnectText = "Let's Connect";


    private RenderFragment NavbarNavigationContent => @<ul class="navbar-nav me-auto">
    <li class="nav-item">
        <a class="nav-link rounded-pill mx-1" href="#about" data-section="about">@aboutText</a>
    </li>
    <li class="nav-item">
        <a class="nav-link rounded-pill mx-1" href="#experiences" data-section="experiences">@experiencesText</a>
    </li>
    <li class="nav-item">
        <a class="nav-link rounded-pill mx-1" href="#trainings" data-section="training">@trainingText</a>
    </li>
    <li class="nav-item">
        <a class="nav-link rounded-pill mx-1" href="#contact" data-section="contact">@contactText</a>
    </li>
</ul>
    ;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await AnimationService.InitializeAnimationsAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MainLayoutInstance?.SetNavbarContent(NavbarNavigationContent);
        }
    }

    protected override async Task LoadLocalizedStringsAsync()
    {
        await base.LoadLocalizedStringsAsync();
        await LoadResumeAsync();
        MainLayoutInstance?.SetNavbarContent(NavbarNavigationContent);
        StateHasChanged();
    }

    protected override void LoadTexts()
    {
        professionalExperiencesText = LocalizationService.GetString("ProfessionalExperiences");
        trainingCoursesText = LocalizationService.GetString("TrainingCourses");
        showMoreExperiencesText = LocalizationService.GetString("ShowMoreExperiences");
        showLatestExperiencesText = LocalizationService.GetString("ShowLatestExperiences");
        aboutText = LocalizationService.GetString("About");
        experiencesText = LocalizationService.GetString("Experiences");
        trainingText = LocalizationService.GetString("Training");
        contactText = LocalizationService.GetString("Contact");
        letsConnectText = LocalizationService.GetString("LetsConnect");
    }

    private async Task LoadResumeAsync()
    {
        string languageCode = GetLanguageCode(CultureService.CurrentCulture.Name);
        resume = await LazyLoadingService.LoadDataAsync<Resume>($"data/resume-{languageCode}.json");
        StateHasChanged();
    }

    private static string GetLanguageCode(string cultureName) => cultureName switch
    {
        "fr" or "fr-FR" => "fr",
        _ => "en"
    };

    private void ToggleExperiences()
    {
        showAllExperiences = !showAllExperiences;
        StateHasChanged();
    }

    private string DisplayClasses(int index, int toShow)
    => index < toShow ? $"d-flex" : showAllExperiences ? $"d-flex" : $"d-none";
}
