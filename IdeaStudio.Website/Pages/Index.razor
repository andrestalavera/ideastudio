@page "/"
@page "/andres-talavera-resume"
@using IdeaStudio.Website.Models
@using IdeaStudio.Website.Shared
@using IdeaStudio.Website.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject ILazyLoadingService LazyLoadingService
@inject IJSRuntime JSRuntime

<!-- Hero Section with Profile -->
<HeroComponent Introduction="@aboutMe?.Introduction" Languages="@aboutMe?.Languages" />

<!-- Service Cards Section -->
<ServiceCardsComponent Cards="@aboutMe?.Cards" />

<!-- Experience Section -->
<section id="experiences" class="py-5 bg-light bg-opacity-10">
	<div class="container">
		<div class="row">
			<div class="col-12">
				<h2 class="text-center mb-5 fade-in-up text-white display-4 fw-light">Professional Experience</h2>
			</div>
		</div>

		@if (experiences?.Items != null && experiences.Items.Any())
		{
			<div class="experience-timeline">
				@foreach (var (experience, index) in experiences.Items.Select((e, i) => (e, i)))
				{
					<Virtualize Items="experiences.Items" Context="experience">
						<div class="experience-item fade-in-up mb-4" data-bs-delay="@(index * 200)"
							style="transition-delay: @(index * 200)ms;">
							<ExperienceComponent Title="@experience.Title" Company="@experience.Company" Mode="@experience.Mode"
								StartDate="@experience.StartDate" EndDate="@experience.EndDate" Location="@experience.Location"
								Description="@experience.Description" Responsibilities="@experience.Responsibilities"
							Skills="@experience.Skills" />
					</div>
					</Virtualize>
				}
			</div>
		}
		else
		{
			<div class="text-center">
				<div class="card bg-acrylic-4 border-0 mx-auto" style="max-width: 300px;">
					<div class="card-body text-center p-4">
						<div class="spinner-border text-primary mb-3" role="status" aria-label="Loading experiences">
							<span class="visually-hidden">Loading...</span>
						</div>
						<p class="text-light mb-0">Loading experiences...</p>
					</div>
				</div>
			</div>
		}
	</div>
</section>

<!-- Training Section -->
<section id="training" class="py-5">
	<div class="container">
		<div class="row">
			<div class="col-12">
				<h2 class="text-center mb-5 fade-in-up text-white display-4 fw-light">I have conducted training courses
					for...</h2>
			</div>
		</div>

		@if (trainingCenters?.Items != null && trainingCenters.Items.Any())
		{
			<div class="row g-4">
				@foreach (var (trainingCenter, index) in trainingCenters.Items.Select((t, i) => (t, i)))
				{
					<div class="col-lg-6">
						<article class="card h-100 bg-acrylic-4 border-0 shadow-lg fade-in-up training-card"
							data-bs-delay="@(index * 150)" style="transition-delay: @(index * 150)ms;">
							<div class="card-body p-4">
								<h3 class="card-title h4 mb-3 text-primary fw-bold">@trainingCenter.Name</h3>

								@if (trainingCenter.Courses != null)
								{
									<div class="mb-3">
										<h4 class="h6 mb-2 text-light opacity-75">Courses</h4>
										<div class="d-flex flex-wrap gap-2">
											@foreach (var course in trainingCenter.Courses)
											{
												<span class="badge bg-acrylic-badge text-primary rounded-pill px-3 py-2">
													<i class="fas fa-graduation-cap me-2" aria-hidden="true"></i>
													@course
												</span>
											}
										</div>
									</div>
								}

								@if (trainingCenter.Locations != null)
								{
									<div class="small text-light opacity-75">
										<i class="fas fa-map-marker-alt me-2 text-primary" aria-hidden="true"></i>
										@string.Join(" - ", trainingCenter.Locations)
									</div>
								}
							</div>
						</article>
					</div>
				}
			</div>
		}
		else
		{
			<div class="row g-4">
				@for (int i = 0; i < 6; i++)
				{
					<div class="col-lg-6">
						<div class="card h-100 bg-acrylic-4 border-0 placeholder-card">
							<div class="card-body p-4">
								<div class="placeholder-glow">
									<span class="placeholder col-6 rounded-pill mb-3 bg-primary"></span>
									<span class="placeholder col-4 rounded-pill mb-2 bg-secondary"></span>
									<span class="placeholder col-8 rounded-pill mb-2 bg-secondary"></span>
									<span class="placeholder col-5 rounded-pill bg-secondary"></span>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
</section>

<!-- Contact Section -->
<section id="contact" class="py-5">
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-lg-8 text-center fade-in-up">
				<div class="card bg-acrylic-5 border-0 shadow-lg contact-card">
					<div class="card-body p-5">
						<h2 class="mb-4 text-white display-5 fw-light">Let's Connect</h2>
						<p class="lead mb-4 text-light opacity-90">Ready to discuss your next project? Let's build
							something amazing together.</p>
						<div class="d-flex justify-content-center gap-3 flex-wrap">
							<a href="https://www.linkedin.com/in/andrestalavera/"
								class="btn btn-primary rounded-pill bg-acrylic-primary px-4 py-2" target="_blank"
								rel="noopener noreferrer">
								<i class="fab fa-linkedin me-2" aria-hidden="true"></i>Connect on LinkedIn
							</a>
							<a href="https://github.com/andrestalavera"
								class="btn btn-outline-light rounded-pill bg-acrylic-button px-4 py-2" target="_blank"
								rel="noopener noreferrer">
								<i class="fab fa-github me-2" aria-hidden="true"></i>View GitHub
							</a>
							<button class="btn btn-success rounded-pill bg-acrylic-success px-4 py-2"
								onclick="Calendly.initPopupWidget({url: 'https://calendly.com/andres-talavera/30min'});return false;">
								<i class="fas fa-video me-2" aria-hidden="true"></i>Schedule Meeting
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

@code {
	private AboutMe? aboutMe;
	private Experiences? experiences;
	private TrainingCenters? trainingCenters;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Load data concurrently
			var aboutMeTask = LazyLoadingService.LoadDataAsync<AboutMe>("data/aboutme.json");
			var experiencesTask = LazyLoadingService.LoadDataAsync<Experiences>("data/experiences.json");
			var trainingCentersTask = LazyLoadingService.LoadDataAsync<TrainingCenters>("data/trainingcenters.json");

			// Wait for all tasks to complete
			await Task.WhenAll(aboutMeTask, experiencesTask, trainingCentersTask);

			aboutMe = await aboutMeTask;
			experiences = await experiencesTask;
			trainingCenters = await trainingCentersTask;

			// Initialize JavaScript functions for animations and scroll spy
			await JSRuntime.InvokeVoidAsync("initializeFadeInAnimations");
			await JSRuntime.InvokeVoidAsync("initializeScrollSpy");

			// Trigger re-render
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading data: {ex.Message}");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("initializeFadeInAnimations");
		}
	}
}
